ClineやRooCodeでのプロンプト入力・実装支援を行うための指示書

 １. 全体の要件

- フォルダ構成のルール  
  - ルートフォルダ（ルートフォルダ名：IT運用システム）：プロジェクト全体の概要が分かるように、ルートフォルダにプロジェクト名と概要ドキュメント（例：README.md）を配置する、各フェーズの概要ガイド及び詳細仕様ドキュメントはそれぞれの下記サブフォルダ内に配置する  
  - サブフォルダ：各フェーズごとにサブフォルダを作成：作成済み  
      - `01_企画・要件定義`  
      - `02_設計`  
      - `03_実装`  
      - `04_テスト`  
      - `05_展開・移行`  
      - `06_運用・保守`
  
- 命名規則とドキュメントの整備  
  - 各サブフォルダおよびファイル名は、フェーズ番号とフェーズ名（または項目名）を含め、一目で内容が把握できるようにする  
  - 各フォルダ内にREADME.mdや概要説明ファイルを配置し、そのフェーズの目的、内容、注意点、関連資料の参照先などを明記する。
  - 各フェーズの概要ガイド及び詳細仕様ドキュメントはそれぞれの下記サブフォルダ内に配置する

- テンプレートと自動連携  
  - 各フェーズで共通して利用するテンプレート（項目リスト、チェックリスト、プロンプトフォーマット）を用意する  
  - 自動連携スクリプトやツール（例えば、フォルダ内の各ファイルを統合してClineやRooCodeに入力するためのスクリプト）の導入を検討する

- バージョン管理  
  - Gitなどのバージョン管理ツールを利用して、ファイルの変更履歴を管理し、フェーズごとの更新が追跡できるようにする

- ツール仕様への適合  
  - Cline、RooCodeが期待する入力形式（Markdown、JSON、プレーンテキストなど）を事前に確認し、必要に応じた変換や整形を行う

- 本運用システムはWebUIベースのシステムとする
　- フロントエンド及びバックエンド仕様に関してはお任せとする

---

 ２. 各フェーズごとの要件

 ① 企画・要件定義フェーズ (`01_企画・要件定義`)
- 目的・ビジョンの策定  
  - システム運用の目的（効率化、信頼性向上、コスト削減など）を明確化  
  - プロジェクト全体のビジョン、背景、ゴールの記述

- 現状分析とデータ収集  
  - 現状のシステム（AD、Microsoft Entra ID、Exchange Online、Microsoft 365、ファイルサーバ等）の課題や利用状況の整理  
  - 信頼できる情報源からのデータ収集と、データクレンジングによる整備状況の記録

- 要件収集と整理  
  - 各ステークホルダー（運用担当、管理者、ユーザー部門など）からの要求事項のヒアリング内容  
  - システム間の連携要件（ハイブリッド認証、SSO、多要素認証など）の整理

- プロンプト用の指示例  
  - 「このフェーズでは、システム運用の目的、現状の課題、各ステークホルダーからの要件を詳細にまとめています。以下の内容を基に、Cline/RooCodeで次の設計フェーズのプロンプトを生成してください。」

---

 ② 設計フェーズ (`02_設計`)
- アーキテクチャ設計  
  - オンプレミスとクラウドサービス（AD・Entra ID、Exchange Online、Microsoft 365等）の連携構成の設計  
  - システム全体のデータフロー、アクセス制御、セキュリティ対策の概要

- 運用プロセス設計  
  - インシデント管理、変更管理、問題管理などの運用フローの策定  
  - 各システムに対するモニタリング・アラートルールの設定内容

- ツール・技術選定  
  - 監視ツール、ログ管理システム、自動化ツールなどの選定理由と設定概要

- プロンプト用の指示例  
  - 「このフェーズでは、システム全体のアーキテクチャと運用プロセス、各種ツールの選定を行っています。次の実装フェーズに向け、これらの設計内容を基にしたプロンプトを生成してください。」

---

 ③ 実装フェーズ (`03_実装`)
- 環境構築とシステム設定  
  - 各システムの環境（オンプレミス、クラウド）の構築手順、設定項目  
  - ADとEntra IDの連携設定、Exchange OnlineやMicrosoft 365のテナント設定、ファイルサーバの構築などの具体的手順

- 自動化・スクリプト開発  
  - 定期作業（バックアップ、パッチ適用、ログ収集）の自動化スクリプト、Orchestrationツールの設定と実装

- プロンプト用の指示例  
  - 「このフェーズでは、各システムの構築および自動化スクリプトの実装について記載しています。設計内容を基に、具体的な実装手順のプロンプトを生成してください。」

---

 ④ テストフェーズ (`04_テスト`)
- 機能テストと統合テスト  
  - 個別システム（AD、Entra ID、Exchange Online等）の動作確認、各システム間の連携確認  
  - テストケースや検証項目、テスト結果の記録

- 負荷・性能テストおよびセキュリティテスト  
  - システム全体の耐久性、応答速度のテスト  
  - 脆弱性診断、ペネトレーションテストの実施結果と対応策の記載

- プロンプト用の指示例  
  - 「このフェーズでは、機能、統合、性能、セキュリティの各テスト結果と課題を詳細に記録しています。次フェーズでの展開に向けた改善策を検討するためのプロンプトを生成してください。」

---

 ⑤ 展開・移行フェーズ (`05_展開・移行`)
- 本番移行計画の策定  
  - ロールアウトスケジュール、移行手順、リスク管理、バックアウトプランの策定内容  
  - 影響範囲の調整、オンプレミスとクラウドの移行タイミング

- ユーザー教育とドキュメント整備  
  - 操作マニュアル、トレーニング資料、サポート体制の構築内容  
  - 管理者向けおよびエンドユーザー向けの教育プランの詳細

- プロンプト用の指示例  
  - 「このフェーズでは、本番移行に向けた計画とユーザー向けドキュメントを整備しています。展開手順および移行時の注意点を基に、実際の展開作業を支援するプロンプトを生成してください。」

---

 ⑥ 運用・保守フェーズ (`06_運用・保守`)
- モニタリングとログ管理  
  - 各システムの稼働状況、パフォーマンス、セキュリティログの一元管理方法  
  - SIEMなどの統合監視ツールとの連携内容

- 定期メンテナンスとインシデント対応  
  - パッチ適用、システムアップデート、定期点検の手順  
  - インシデント発生時の対応フロー、根本原因分析、再発防止策

- 継続的改善プロセス  
  - 運用データ、フィードバックを基にした改善計画の策定内容  
  - 各フェーズからの学びを次回以降のプロンプトに反映するための仕組み

- プロンプト用の指示例  
  - 「このフェーズでは、システムの運用状況のモニタリング、定期メンテナンス、インシデント対応、そして継続的改善のプロセスを詳細に記録しています。これらの内容を基に、今後の保守運用支援用プロンプトを生成してください。」

---

 まとめ

1. 全体として、プロジェクトの各フェーズをフォルダ・ファイルでモジュール化し、命名規則・ドキュメントの整備、バージョン管理、自動連携スクリプトの導入など、ClineやRooCodeがスムーズに利用できる情報構造を整える。  
2. 各フェーズごとに、フェーズの目的、詳細な手順、検証項目、改善策などを文書化し、ツールが要求する形式に合わせたプロンプト指示を準備する。

