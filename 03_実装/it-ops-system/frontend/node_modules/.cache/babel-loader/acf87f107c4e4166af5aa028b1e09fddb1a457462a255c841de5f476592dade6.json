{"ast":null,"code":"/**\r\n * WebSocketクライアント - リアルタイム通信用\r\n */class WebSocketClient{constructor(){let url=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'ws://localhost:3002/ws';this.socket=null;this.url=void 0;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectTimeout=3000;// ms\nthis.listeners={};this.url=url;}/**\r\n   * WebSocket接続を開始する\r\n   */connect(){if(this.socket){this.disconnect();}try{console.log(`Connecting to WebSocket at ${this.url}`);this.socket=new WebSocket(this.url);this.socket.onopen=()=>{console.log('WebSocket connection established');this.reconnectAttempts=0;this.emit('connected',{timestamp:new Date().toISOString()});};this.socket.onmessage=event=>{try{const data=JSON.parse(event.data);this.emit('message',data);// 特定のタイプのメッセージに対するイベント発火\nif(data.type){this.emit(data.type,data);}}catch(e){console.error('Failed to parse WebSocket message:',e);}};this.socket.onclose=event=>{console.log(`WebSocket connection closed: ${event.code} ${event.reason}`);this.socket=null;this.emit('disconnected',{code:event.code,reason:event.reason,timestamp:new Date().toISOString()});// 再接続を試みる（接続が正常に切断された場合を除く）\nif(event.code!==1000&&event.code!==1001){this.attemptReconnect();}};this.socket.onerror=error=>{console.error('WebSocket error:',error);this.emit('error',{error,timestamp:new Date().toISOString()});};}catch(err){console.error('Failed to establish WebSocket connection:',err);this.emit('error',{error:err,timestamp:new Date().toISOString()});}}/**\r\n   * WebSocket接続を再接続する\r\n   */attemptReconnect(){if(this.reconnectAttempts>=this.maxReconnectAttempts){console.log('Maximum reconnection attempts reached');return;}this.reconnectAttempts++;console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);// 再接続の間隔を指数関数的に増加させる（バックオフ戦略）\nconst timeout=this.reconnectTimeout*Math.pow(1.5,this.reconnectAttempts-1);console.log(`Will try again in ${timeout}ms`);setTimeout(()=>{this.connect();},timeout);}/**\r\n   * WebSocket接続を閉じる\r\n   */disconnect(){if(this.socket){this.socket.close(1000,'Closed by client');this.socket=null;}}/**\r\n   * サーバーにメッセージを送信する\r\n   */send(data){if(!this.socket||this.socket.readyState!==WebSocket.OPEN){console.error('Cannot send message: WebSocket is not connected');return false;}try{const message=typeof data==='string'?data:JSON.stringify(data);this.socket.send(message);return true;}catch(err){console.error('Failed to send message:',err);return false;}}/**\r\n   * イベントリスナーを登録する\r\n   */on(event,callback){if(!this.listeners[event]){this.listeners[event]=[];}this.listeners[event].push(callback);}/**\r\n   * イベントリスナーを削除する\r\n   */off(event,callback){if(!this.listeners[event])return;if(callback){this.listeners[event]=this.listeners[event].filter(cb=>cb!==callback);}else{delete this.listeners[event];}}/**\r\n   * イベントを発火する\r\n   */emit(event,data){if(!this.listeners[event])return;this.listeners[event].forEach(callback=>{try{callback(data);}catch(err){console.error(`Error in '${event}' event handler:`,err);}});}/**\r\n   * WebSocket接続の状態を取得する\r\n   */get status(){if(!this.socket)return'CLOSED';switch(this.socket.readyState){case WebSocket.CONNECTING:return'CONNECTING';case WebSocket.OPEN:return'OPEN';case WebSocket.CLOSING:return'CLOSING';case WebSocket.CLOSED:return'CLOSED';default:return'UNKNOWN';}}/**\r\n   * WebSocket接続が開いているかどうかを確認する\r\n   */get isConnected(){return this.socket!==null&&this.socket.readyState===WebSocket.OPEN;}}// シングルトンインスタンス\n// APIの健全性チェック用にフォールバックモードを実装\nclass WebSocketManager{constructor(){this.client=void 0;this.usePolling=false;this.pollingInterval=10000;// 10秒\nthis.pollingTimer=null;this.client=new WebSocketClient();// WebSocketが失敗した場合のフォールバック処理を設定\nthis.client.on('error',()=>{if(!this.usePolling){console.log('WebSocket connection failed, falling back to polling');this.enablePolling();}});}// WebSocketクライアントを取得\ngetClient(){return this.client;}// 接続を開始\nconnect(){// すでにポーリングモードの場合は新しいWebSocket接続を試みない\nif(this.usePolling){return;}this.client.connect();}// 接続を終了\ndisconnect(){this.client.disconnect();this.disablePolling();}// ポーリングモードを有効化\nenablePolling(){if(this.pollingTimer){clearInterval(this.pollingTimer);}this.usePolling=true;this.pollingTimer=setInterval(()=>{// 従来のAPIエンドポイントを使用してヘルスチェック\nfetch('/api/health').then(response=>{if(response.ok){console.log('Health check successful via polling');}else{console.error('Health check failed via polling');}}).catch(err=>{console.error('Health check request failed:',err);});},this.pollingInterval);}// ポーリングモードを無効化\ndisablePolling(){if(this.pollingTimer){clearInterval(this.pollingTimer);this.pollingTimer=null;}this.usePolling=false;}// 接続状態を確認\nget isConnected(){return this.client.isConnected;}// WebSocketを使用するかポーリングを使用するかを確認\nget isUsingPolling(){return this.usePolling;}}const websocketManager=new WebSocketManager();export default websocketManager.getClient();","map":{"version":3,"names":["WebSocketClient","constructor","url","arguments","length","undefined","socket","reconnectAttempts","maxReconnectAttempts","reconnectTimeout","listeners","connect","disconnect","console","log","WebSocket","onopen","emit","timestamp","Date","toISOString","onmessage","event","data","JSON","parse","type","e","error","onclose","code","reason","attemptReconnect","onerror","err","timeout","Math","pow","setTimeout","close","send","readyState","OPEN","message","stringify","on","callback","push","off","filter","cb","forEach","status","CONNECTING","CLOSING","CLOSED","isConnected","WebSocketManager","client","usePolling","pollingInterval","pollingTimer","enablePolling","getClient","disablePolling","clearInterval","setInterval","fetch","then","response","ok","catch","isUsingPolling","websocketManager"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/services/websocket.ts"],"sourcesContent":["/**\r\n * WebSocketクライアント - リアルタイム通信用\r\n */\r\nclass WebSocketClient {\r\n  private socket: WebSocket | null = null;\r\n  private url: string;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectTimeout = 3000; // ms\r\n  private listeners: Record<string, Function[]> = {};\r\n  \r\n  constructor(url: string = 'ws://localhost:3002/ws') {\r\n    this.url = url;\r\n  }\r\n\r\n  /**\r\n   * WebSocket接続を開始する\r\n   */\r\n  connect(): void {\r\n    if (this.socket) {\r\n      this.disconnect();\r\n    }\r\n\r\n    try {\r\n      console.log(`Connecting to WebSocket at ${this.url}`);\r\n      this.socket = new WebSocket(this.url);\r\n      \r\n      this.socket.onopen = () => {\r\n        console.log('WebSocket connection established');\r\n        this.reconnectAttempts = 0;\r\n        this.emit('connected', { timestamp: new Date().toISOString() });\r\n      };\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          this.emit('message', data);\r\n          \r\n          // 特定のタイプのメッセージに対するイベント発火\r\n          if (data.type) {\r\n            this.emit(data.type, data);\r\n          }\r\n        } catch (e) {\r\n          console.error('Failed to parse WebSocket message:', e);\r\n        }\r\n      };\r\n      \r\n      this.socket.onclose = (event) => {\r\n        console.log(`WebSocket connection closed: ${event.code} ${event.reason}`);\r\n        this.socket = null;\r\n        this.emit('disconnected', { \r\n          code: event.code, \r\n          reason: event.reason, \r\n          timestamp: new Date().toISOString() \r\n        });\r\n        \r\n        // 再接続を試みる（接続が正常に切断された場合を除く）\r\n        if (event.code !== 1000 && event.code !== 1001) {\r\n          this.attemptReconnect();\r\n        }\r\n      };\r\n      \r\n      this.socket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.emit('error', { error, timestamp: new Date().toISOString() });\r\n      };\r\n    } catch (err) {\r\n      console.error('Failed to establish WebSocket connection:', err);\r\n      this.emit('error', { error: err, timestamp: new Date().toISOString() });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * WebSocket接続を再接続する\r\n   */\r\n  private attemptReconnect(): void {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('Maximum reconnection attempts reached');\r\n      return;\r\n    }\r\n    \r\n    this.reconnectAttempts++;\r\n    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\r\n    \r\n    // 再接続の間隔を指数関数的に増加させる（バックオフ戦略）\r\n    const timeout = this.reconnectTimeout * Math.pow(1.5, this.reconnectAttempts - 1);\r\n    console.log(`Will try again in ${timeout}ms`);\r\n    \r\n    setTimeout(() => {\r\n      this.connect();\r\n    }, timeout);\r\n  }\r\n  \r\n  /**\r\n   * WebSocket接続を閉じる\r\n   */\r\n  disconnect(): void {\r\n    if (this.socket) {\r\n      this.socket.close(1000, 'Closed by client');\r\n      this.socket = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * サーバーにメッセージを送信する\r\n   */\r\n  send(data: any): boolean {\r\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n      console.error('Cannot send message: WebSocket is not connected');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const message = typeof data === 'string' ? data : JSON.stringify(data);\r\n      this.socket.send(message);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Failed to send message:', err);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * イベントリスナーを登録する\r\n   */\r\n  on(event: string, callback: Function): void {\r\n    if (!this.listeners[event]) {\r\n      this.listeners[event] = [];\r\n    }\r\n    this.listeners[event].push(callback);\r\n  }\r\n  \r\n  /**\r\n   * イベントリスナーを削除する\r\n   */\r\n  off(event: string, callback?: Function): void {\r\n    if (!this.listeners[event]) return;\r\n    \r\n    if (callback) {\r\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\r\n    } else {\r\n      delete this.listeners[event];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * イベントを発火する\r\n   */\r\n  private emit(event: string, data: any): void {\r\n    if (!this.listeners[event]) return;\r\n    \r\n    this.listeners[event].forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (err) {\r\n        console.error(`Error in '${event}' event handler:`, err);\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * WebSocket接続の状態を取得する\r\n   */\r\n  get status(): string {\r\n    if (!this.socket) return 'CLOSED';\r\n    \r\n    switch (this.socket.readyState) {\r\n      case WebSocket.CONNECTING:\r\n        return 'CONNECTING';\r\n      case WebSocket.OPEN:\r\n        return 'OPEN';\r\n      case WebSocket.CLOSING:\r\n        return 'CLOSING';\r\n      case WebSocket.CLOSED:\r\n        return 'CLOSED';\r\n      default:\r\n        return 'UNKNOWN';\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * WebSocket接続が開いているかどうかを確認する\r\n   */\r\n  get isConnected(): boolean {\r\n    return this.socket !== null && this.socket.readyState === WebSocket.OPEN;\r\n  }\r\n}\r\n\r\n// シングルトンインスタンス\r\n// APIの健全性チェック用にフォールバックモードを実装\r\nclass WebSocketManager {\r\n  private client: WebSocketClient;\r\n  private usePolling: boolean = false;\r\n  private pollingInterval: number = 10000; // 10秒\r\n  private pollingTimer: NodeJS.Timeout | null = null;\r\n  \r\n  constructor() {\r\n    this.client = new WebSocketClient();\r\n    \r\n    // WebSocketが失敗した場合のフォールバック処理を設定\r\n    this.client.on('error', () => {\r\n      if (!this.usePolling) {\r\n        console.log('WebSocket connection failed, falling back to polling');\r\n        this.enablePolling();\r\n      }\r\n    });\r\n  }\r\n  \r\n  // WebSocketクライアントを取得\r\n  getClient(): WebSocketClient {\r\n    return this.client;\r\n  }\r\n  \r\n  // 接続を開始\r\n  connect(): void {\r\n    // すでにポーリングモードの場合は新しいWebSocket接続を試みない\r\n    if (this.usePolling) {\r\n      return;\r\n    }\r\n    \r\n    this.client.connect();\r\n  }\r\n  \r\n  // 接続を終了\r\n  disconnect(): void {\r\n    this.client.disconnect();\r\n    this.disablePolling();\r\n  }\r\n  \r\n  // ポーリングモードを有効化\r\n  private enablePolling(): void {\r\n    if (this.pollingTimer) {\r\n      clearInterval(this.pollingTimer);\r\n    }\r\n    \r\n    this.usePolling = true;\r\n    this.pollingTimer = setInterval(() => {\r\n      // 従来のAPIエンドポイントを使用してヘルスチェック\r\n      fetch('/api/health')\r\n        .then(response => {\r\n          if (response.ok) {\r\n            console.log('Health check successful via polling');\r\n          } else {\r\n            console.error('Health check failed via polling');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error('Health check request failed:', err);\r\n        });\r\n    }, this.pollingInterval);\r\n  }\r\n  \r\n  // ポーリングモードを無効化\r\n  private disablePolling(): void {\r\n    if (this.pollingTimer) {\r\n      clearInterval(this.pollingTimer);\r\n      this.pollingTimer = null;\r\n    }\r\n    this.usePolling = false;\r\n  }\r\n  \r\n  // 接続状態を確認\r\n  get isConnected(): boolean {\r\n    return this.client.isConnected;\r\n  }\r\n  \r\n  // WebSocketを使用するかポーリングを使用するかを確認\r\n  get isUsingPolling(): boolean {\r\n    return this.usePolling;\r\n  }\r\n}\r\n\r\nconst websocketManager = new WebSocketManager();\r\nexport default websocketManager.getClient();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}