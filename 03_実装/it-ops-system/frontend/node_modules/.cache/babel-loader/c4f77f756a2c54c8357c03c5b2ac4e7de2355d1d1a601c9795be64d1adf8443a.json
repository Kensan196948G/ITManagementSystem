{"ast":null,"code":"var _jsxFileName = \"E:\\\\IT\\u904B\\u7528\\u30B7\\u30B9\\u30C6\\u30E0\\\\03_\\u5B9F\\u88C5\\\\it-ops-system\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { AppRouter } from './routes/AppRouter';\nimport websocket from './services/websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [connectionStatus, setConnectionStatus] = useState('initializing');\n\n  // WebSocket接続を初期化（プログレッシブエンハンスメント）\n  useEffect(() => {\n    console.log('Initializing connectivity...');\n\n    // 最初にAPIヘルスチェックを行ってから接続を試みる\n    fetch('/api/health').then(response => {\n      if (response.ok) {\n        console.log('Backend is available, attempting WebSocket connection');\n        // バックエンドが利用可能な場合のみWebSocketを試みる\n        setTimeout(() => {\n          websocket.connect();\n        }, 2000); // 2秒の遅延を入れてリソース競合を避ける\n      } else {\n        console.warn('Backend API check failed, skipping WebSocket connection');\n        setConnectionStatus('backend-unavailable');\n      }\n    }).catch(err => {\n      console.error('API health check failed:', err);\n      setConnectionStatus('backend-error');\n    });\n\n    // イベントリスナーを登録\n    websocket.on('connected', data => {\n      console.log('WebSocket connected:', data);\n      setConnectionStatus('connected');\n    });\n    websocket.on('disconnected', data => {\n      console.log('WebSocket disconnected:', data);\n      setConnectionStatus('disconnected');\n    });\n    websocket.on('error', error => {\n      console.error('WebSocket error:', error);\n      // エラーが発生してもステータスは更新しない（フォールバックメカニズムが処理）\n    });\n\n    // システム状態更新の受信\n    websocket.on('system_status', status => {\n      console.log('System status update received:', status);\n      // ここでシステム状態を更新するための処理を追加できます\n    });\n\n    // コンポーネントがアンマウントされた時に接続を閉じる\n    return () => {\n      console.log('Closing WebSocket connection...');\n      websocket.disconnect();\n    };\n  }, []);\n\n  // 接続ステータスをデバッグ表示（開発環境のみ）\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Connection status changed: ${connectionStatus}`);\n    }\n  }, [connectionStatus]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AppRouter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"HAeCemNMDK2ehpU1s1Ef8wl7tq8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","AppRouter","websocket","jsxDEV","_jsxDEV","App","_s","connectionStatus","setConnectionStatus","console","log","fetch","then","response","ok","setTimeout","connect","warn","catch","err","error","on","data","status","disconnect","process","env","NODE_ENV","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { AppRouter } from './routes/AppRouter';\r\nimport websocket from './services/websocket';\r\n\r\nfunction App() {\r\n  const [connectionStatus, setConnectionStatus] = useState<string>('initializing');\r\n  \r\n  // WebSocket接続を初期化（プログレッシブエンハンスメント）\r\n  useEffect(() => {\r\n    console.log('Initializing connectivity...');\r\n    \r\n    // 最初にAPIヘルスチェックを行ってから接続を試みる\r\n    fetch('/api/health')\r\n      .then(response => {\r\n        if (response.ok) {\r\n          console.log('Backend is available, attempting WebSocket connection');\r\n          // バックエンドが利用可能な場合のみWebSocketを試みる\r\n          setTimeout(() => {\r\n            websocket.connect();\r\n          }, 2000); // 2秒の遅延を入れてリソース競合を避ける\r\n        } else {\r\n          console.warn('Backend API check failed, skipping WebSocket connection');\r\n          setConnectionStatus('backend-unavailable');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error('API health check failed:', err);\r\n        setConnectionStatus('backend-error');\r\n      });\r\n    \r\n    // イベントリスナーを登録\r\n    websocket.on('connected', (data: { timestamp: string }) => {\r\n      console.log('WebSocket connected:', data);\r\n      setConnectionStatus('connected');\r\n    });\r\n    \r\n    websocket.on('disconnected', (data: { code: number; reason: string; timestamp: string }) => {\r\n      console.log('WebSocket disconnected:', data);\r\n      setConnectionStatus('disconnected');\r\n    });\r\n    \r\n    websocket.on('error', (error: { error: unknown; timestamp: string }) => {\r\n      console.error('WebSocket error:', error);\r\n      // エラーが発生してもステータスは更新しない（フォールバックメカニズムが処理）\r\n    });\r\n    \r\n    // システム状態更新の受信\r\n    websocket.on('system_status', (status: any) => {\r\n      console.log('System status update received:', status);\r\n      // ここでシステム状態を更新するための処理を追加できます\r\n    });\r\n    \r\n    // コンポーネントがアンマウントされた時に接続を閉じる\r\n    return () => {\r\n      console.log('Closing WebSocket connection...');\r\n      websocket.disconnect();\r\n    };\r\n  }, []);\r\n  \r\n  // 接続ステータスをデバッグ表示（開発環境のみ）\r\n  useEffect(() => {\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`Connection status changed: ${connectionStatus}`);\r\n    }\r\n  }, [connectionStatus]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppRouter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,SAAS,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGR,QAAQ,CAAS,cAAc,CAAC;;EAEhF;EACAD,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;IAE3C;IACAC,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACfL,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;QACpE;QACAK,UAAU,CAAC,MAAM;UACfb,SAAS,CAACc,OAAO,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ,CAAC,MAAM;QACLP,OAAO,CAACQ,IAAI,CAAC,yDAAyD,CAAC;QACvET,mBAAmB,CAAC,qBAAqB,CAAC;MAC5C;IACF,CAAC,CAAC,CACDU,KAAK,CAACC,GAAG,IAAI;MACZV,OAAO,CAACW,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAAC;MAC9CX,mBAAmB,CAAC,eAAe,CAAC;IACtC,CAAC,CAAC;;IAEJ;IACAN,SAAS,CAACmB,EAAE,CAAC,WAAW,EAAGC,IAA2B,IAAK;MACzDb,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEY,IAAI,CAAC;MACzCd,mBAAmB,CAAC,WAAW,CAAC;IAClC,CAAC,CAAC;IAEFN,SAAS,CAACmB,EAAE,CAAC,cAAc,EAAGC,IAAyD,IAAK;MAC1Fb,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEY,IAAI,CAAC;MAC5Cd,mBAAmB,CAAC,cAAc,CAAC;IACrC,CAAC,CAAC;IAEFN,SAAS,CAACmB,EAAE,CAAC,OAAO,EAAGD,KAA4C,IAAK;MACtEX,OAAO,CAACW,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC;IACF,CAAC,CAAC;;IAEF;IACAlB,SAAS,CAACmB,EAAE,CAAC,eAAe,EAAGE,MAAW,IAAK;MAC7Cd,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEa,MAAM,CAAC;MACrD;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXd,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CR,SAAS,CAACsB,UAAU,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAzB,SAAS,CAAC,MAAM;IACd,IAAI0B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;MAC1ClB,OAAO,CAACC,GAAG,CAAC,8BAA8BH,gBAAgB,EAAE,CAAC;IAC/D;EACF,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,oBACEH,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBzB,OAAA,CAACH,SAAS;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV;AAAC3B,EAAA,CAnEQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAqEZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}