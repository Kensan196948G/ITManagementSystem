{"ast":null,"code":"import axios from 'axios';\n// 開発環境では相対パスを使用（setupProxyの設定を活用）\nconst API_BASE_URL = '/api';\n\n// axiosInstanceの設定でwithCredentialsを設定\nexport const axiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: false\n});\n\n// リクエストインターセプター\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// レスポンスインターセプター\naxiosInstance.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authApi = {\n  async login(credentials) {\n    var _response$data, _response$data$data;\n    const endpoint = process.env.NODE_ENV === 'development' ? '/auth/dev/login' : '/auth/login';\n    const response = await axiosInstance.post(endpoint, credentials);\n    if ((_response$data = response.data) !== null && _response$data !== void 0 && (_response$data$data = _response$data.data) !== null && _response$data$data !== void 0 && _response$data$data.token) {\n      localStorage.setItem('token', response.data.data.token);\n      // トークンをセットしたら、レスポンスヘッダーも更新\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\n    }\n    return response.data;\n  },\n  async logout() {\n    await axiosInstance.post('/auth/logout');\n    localStorage.removeItem('token');\n    delete axiosInstance.defaults.headers.common['Authorization'];\n  },\n  async getCurrentUser() {\n    try {\n      const response = await axiosInstance.get('/auth/me');\n      return response.data.data || null;\n    } catch (error) {\n      console.error('Failed to get current user:', error);\n      return null;\n    }\n  },\n  checkPermission: async params => {\n    const response = await axiosInstance.post('/auth/check-permission', params);\n    return response.data.allowed;\n  }\n};\nexport const metricsApi = {\n  async getSystemMetrics() {\n    try {\n      const response = await axiosInstance.get('/metrics/system');\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch system metrics:', error);\n      throw error;\n    }\n  }\n};\nexport const alertsApi = {\n  getAlerts: async () => {\n    const response = await axiosInstance.get('/security/dashboard');\n    const data = await response.data;\n    if (!data || !data.activeAlerts) {\n      throw new Error('Failed to fetch alerts');\n    }\n    return data.activeAlerts;\n  },\n  acknowledgeAlert: async alertId => {\n    const response = await axiosInstance.post(`/security/incidents/${alertId}/respond`, {\n      action: 'acknowledge'\n    });\n    return response.data;\n  }\n};\nexport const logsApi = {\n  getLogs: async () => {\n    const response = await axiosInstance.get('/monitoring/logs');\n    if (response.data.status === 'error' || !response.data.data) {\n      throw new Error(response.data.message || 'Failed to fetch logs');\n    }\n    return response.data.data;\n  }\n};\nexport const roleApi = {\n  async getRoleMappings() {\n    const response = await axiosInstance.get('/auth/role-mappings');\n    return response.data;\n  },\n  async getUserRoles(email) {\n    const response = await axiosInstance.get(`/auth/user-roles/${email}`);\n    return response.data;\n  }\n};\nexport const m365Api = {\n  async getLicenses() {\n    const response = await axiosInstance.get('/m365/licenses');\n    return response.data;\n  },\n  async getUsers() {\n    const response = await axiosInstance.get('/m365/users');\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","axiosInstance","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authApi","login","credentials","_response$data","_response$data$data","endpoint","process","env","NODE_ENV","post","data","setItem","defaults","common","logout","getCurrentUser","get","console","checkPermission","params","allowed","metricsApi","getSystemMetrics","alertsApi","getAlerts","activeAlerts","Error","acknowledgeAlert","alertId","action","logsApi","getLogs","message","roleApi","getRoleMappings","getUserRoles","email","m365Api","getLicenses","getUsers"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { ApiResponse, AuthState, User, LoginFormData, Alert, LogEntry, AuthResponse } from '../types/api';\r\n\r\n// 開発環境では相対パスを使用（setupProxyの設定を活用）\r\nconst API_BASE_URL = '/api';\r\n\r\n// axiosInstanceの設定でwithCredentialsを設定\r\nexport const axiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: false,\r\n});\r\n\r\n// リクエストインターセプター\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// レスポンスインターセプター\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authApi = {\r\n  async login(credentials: LoginFormData): Promise<ApiResponse<AuthResponse>> {\r\n    const endpoint = process.env.NODE_ENV === 'development' \r\n      ? '/auth/dev/login' \r\n      : '/auth/login';\r\n    \r\n    const response = await axiosInstance.post<ApiResponse<AuthResponse>>(endpoint, credentials);\r\n    if (response.data?.data?.token) {\r\n      localStorage.setItem('token', response.data.data.token);\r\n      // トークンをセットしたら、レスポンスヘッダーも更新\r\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${response.data.data.token}`;\r\n    }\r\n    return response.data;\r\n  },\r\n\r\n  async logout(): Promise<void> {\r\n    await axiosInstance.post('/auth/logout');\r\n    localStorage.removeItem('token');\r\n    delete axiosInstance.defaults.headers.common['Authorization'];\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User | null> {\r\n    try {\r\n      const response = await axiosInstance.get<ApiResponse<User>>('/auth/me');\r\n      return response.data.data || null;\r\n    } catch (error) {\r\n      console.error('Failed to get current user:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  checkPermission: async (params: { userEmail: string; check: { resource: string; action: string } }): Promise<boolean> => {\r\n    const response = await axiosInstance.post('/auth/check-permission', params);\r\n    return response.data.allowed;\r\n  }\r\n};\r\n\r\nexport const metricsApi = {\r\n  async getSystemMetrics() {\r\n    try {\r\n      const response = await axiosInstance.get('/metrics/system');\r\n      return response.data.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch system metrics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\nexport const alertsApi = {\r\n  getAlerts: async (): Promise<Alert[]> => {\r\n    const response = await axiosInstance.get('/security/dashboard');\r\n    const data = await response.data;\r\n    if (!data || !data.activeAlerts) {\r\n      throw new Error('Failed to fetch alerts');\r\n    }\r\n    return data.activeAlerts;\r\n  },\r\n\r\n  acknowledgeAlert: async (alertId: string): Promise<ApiResponse> => {\r\n    const response = await axiosInstance.post(`/security/incidents/${alertId}/respond`, {\r\n      action: 'acknowledge'\r\n    });\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const logsApi = {\r\n  getLogs: async (): Promise<LogEntry[]> => {\r\n    const response = await axiosInstance.get('/monitoring/logs');\r\n    if (response.data.status === 'error' || !response.data.data) {\r\n      throw new Error(response.data.message || 'Failed to fetch logs');\r\n    }\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\nexport const roleApi = {\r\n  async getRoleMappings() {\r\n    const response = await axiosInstance.get('/auth/role-mappings');\r\n    return response.data;\r\n  },\r\n\r\n  async getUserRoles(email: string) {\r\n    const response = await axiosInstance.get(`/auth/user-roles/${email}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport const m365Api = {\r\n  async getLicenses() {\r\n    const response = await axiosInstance.get('/m365/licenses');\r\n    return response.data;\r\n  },\r\n\r\n  async getUsers() {\r\n    const response = await axiosInstance.get('/m365/users');\r\n    return response.data;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}