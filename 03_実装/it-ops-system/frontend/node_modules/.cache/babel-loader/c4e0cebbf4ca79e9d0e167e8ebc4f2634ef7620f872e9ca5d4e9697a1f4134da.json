{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nexport const metricsService = {\n  async getSystemMetrics() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/metrics/system`, {\n        withCredentials: true\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching system metrics:', error);\n      throw new Error('Failed to fetch system metrics');\n    }\n  },\n  async startMetricsPolling(callback, interval = 5000) {\n    const pollMetrics = async () => {\n      try {\n        const metrics = await this.getSystemMetrics();\n        callback(metrics);\n      } catch (error) {\n        console.error('Error polling metrics:', error);\n      }\n    };\n\n    // 初回実行\n    await pollMetrics();\n\n    // 定期的なポーリングを開始\n    const intervalId = setInterval(pollMetrics, interval);\n\n    // クリーンアップ関数を返す\n    return () => {\n      clearInterval(intervalId);\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","metricsService","getSystemMetrics","response","get","withCredentials","data","error","console","Error","startMetricsPolling","callback","interval","pollMetrics","metrics","intervalId","setInterval","clearInterval"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/services/metricsService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { SystemMetrics } from '../types/api';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\r\n\r\nexport const metricsService = {\r\n  async getSystemMetrics(): Promise<SystemMetrics> {\r\n    try {\r\n      const response = await axios.get<SystemMetrics>(`${API_BASE_URL}/metrics/system`, {\r\n        withCredentials: true\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching system metrics:', error);\r\n      throw new Error('Failed to fetch system metrics');\r\n    }\r\n  },\r\n\r\n  async startMetricsPolling(callback: (metrics: SystemMetrics) => void, interval: number = 5000): Promise<() => void> {\r\n    const pollMetrics = async () => {\r\n      try {\r\n        const metrics = await this.getSystemMetrics();\r\n        callback(metrics);\r\n      } catch (error) {\r\n        console.error('Error polling metrics:', error);\r\n      }\r\n    };\r\n\r\n    // 初回実行\r\n    await pollMetrics();\r\n\r\n    // 定期的なポーリングを開始\r\n    const intervalId = setInterval(pollMetrics, interval);\r\n\r\n    // クリーンアップ関数を返す\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,OAAO,MAAMC,cAAc,GAAG;EAC5B,MAAMC,gBAAgBA,CAAA,EAA2B;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAgB,GAAGP,YAAY,iBAAiB,EAAE;QAChFQ,eAAe,EAAE;MACnB,CAAC,CAAC;MACF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF,CAAC;EAED,MAAMC,mBAAmBA,CAACC,QAA0C,EAAEC,QAAgB,GAAG,IAAI,EAAuB;IAClH,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACZ,gBAAgB,CAAC,CAAC;QAC7CS,QAAQ,CAACG,OAAO,CAAC;MACnB,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;;IAED;IACA,MAAMM,WAAW,CAAC,CAAC;;IAEnB;IACA,MAAME,UAAU,GAAGC,WAAW,CAACH,WAAW,EAAED,QAAQ,CAAC;;IAErD;IACA,OAAO,MAAM;MACXK,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}