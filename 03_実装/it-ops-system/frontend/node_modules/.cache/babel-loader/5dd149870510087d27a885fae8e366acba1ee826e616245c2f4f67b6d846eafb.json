{"ast":null,"code":"import axios from 'axios';\n// APIクライアントの作成\nconst createApiClient = () => {\n  const baseURL = window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : '/api';\n  const client = axios.create({\n    baseURL,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // リクエストインターセプター\n  client.interceptors.request.use(config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  });\n\n  // レスポンスインターセプター\n  client.interceptors.response.use(response => response, error => {\n    var _error$response;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  });\n  return client;\n};\nconst apiClient = createApiClient();\n\n// 認証関連の API\nexport const authApi = {\n  login: async credentials => {\n    const response = await apiClient.post('/auth/login', credentials);\n    const {\n      token\n    } = response.data.data;\n    localStorage.setItem('token', token);\n    return response.data;\n  },\n  logout: async () => {\n    await apiClient.post('/auth/logout');\n    localStorage.removeItem('token');\n  },\n  getCurrentUser: async () => {\n    const response = await apiClient.get('/auth/me');\n    return response.data;\n  }\n};\n\n// システムメトリクス関連の API\nexport const metricsApi = {\n  getMetrics: async () => {\n    const response = await apiClient.get('/monitoring/metrics');\n    return response.data.data;\n  }\n};\n\n// アラート関連の API\nexport const alertsApi = {\n  getAlerts: async () => {\n    const response = await apiClient.get('/monitoring/alerts');\n    return response.data.data;\n  },\n  acknowledgeAlert: async alertId => {\n    await apiClient.post(`/monitoring/alerts/${alertId}/acknowledge`);\n  }\n};\n\n// ログ関連の API\nexport const logsApi = {\n  getLogs: async params => {\n    const response = await apiClient.get('/monitoring/logs', {\n      params\n    });\n    return response.data.data;\n  },\n  addLog: async logEntry => {\n    const response = await apiClient.post('/monitoring/logs', logEntry);\n    return response.data.data;\n  }\n};\n\n// エラーハンドリング\nexport class ApiError extends Error {\n  constructor(status, message, errors) {\n    super(message);\n    this.status = status;\n    this.message = message;\n    this.errors = errors;\n    this.name = 'ApiError';\n  }\n}\n\n// エラーレスポンスの変換\nexport const handleApiError = error => {\n  if (error.response) {\n    return new ApiError(error.response.status, error.response.data.message || 'APIエラーが発生しました', error.response.data.errors);\n  }\n  return new ApiError(500, 'ネットワークエラーが発生しました');\n};\nexport default {\n  auth: authApi,\n  metrics: metricsApi,\n  alerts: alertsApi,\n  logs: logsApi\n};","map":{"version":3,"names":["axios","createApiClient","baseURL","window","location","hostname","client","create","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","href","Promise","reject","apiClient","authApi","login","credentials","post","data","setItem","logout","getCurrentUser","get","metricsApi","getMetrics","alertsApi","getAlerts","acknowledgeAlert","alertId","logsApi","getLogs","params","addLog","logEntry","ApiError","Error","constructor","message","errors","name","handleApiError","auth","metrics","alerts","logs"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse, AxiosError, InternalAxiosRequestConfig } from 'axios';\r\nimport {\r\n  SystemMetrics,\r\n  Alert,\r\n  LogEntry,\r\n  ApiResponse,\r\n  LoginFormData,\r\n  AuthState,\r\n} from '../types/api';\r\n\r\n// APIクライアントの作成\r\nconst createApiClient = (): AxiosInstance => {\r\n  const baseURL = window.location.hostname === 'localhost' \r\n    ? 'http://localhost:3000/api'\r\n    : '/api';\r\n\r\n  const client = axios.create({\r\n    baseURL,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  // リクエストインターセプター\r\n  client.interceptors.request.use((config: InternalAxiosRequestConfig) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  });\r\n\r\n  // レスポンスインターセプター\r\n  client.interceptors.response.use(\r\n    (response: AxiosResponse) => response,\r\n    (error: AxiosError) => {\r\n      if (error.response?.status === 401) {\r\n        localStorage.removeItem('token');\r\n        window.location.href = '/login';\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return client;\r\n};\r\n\r\nconst apiClient = createApiClient();\r\n\r\n// 認証関連の API\r\nexport const authApi = {\r\n  login: async (credentials: LoginFormData): Promise<ApiResponse<AuthState>> => {\r\n    const response: AxiosResponse<ApiResponse<AuthState>> = await apiClient.post(\r\n      '/auth/login',\r\n      credentials\r\n    );\r\n    const { token } = response.data.data!;\r\n    localStorage.setItem('token', token);\r\n    return response.data;\r\n  },\r\n\r\n  logout: async (): Promise<void> => {\r\n    await apiClient.post('/auth/logout');\r\n    localStorage.removeItem('token');\r\n  },\r\n\r\n  getCurrentUser: async (): Promise<ApiResponse<AuthState>> => {\r\n    const response: AxiosResponse<ApiResponse<AuthState>> = await apiClient.get('/auth/me');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// システムメトリクス関連の API\r\nexport const metricsApi = {\r\n  getMetrics: async (): Promise<SystemMetrics> => {\r\n    const response: AxiosResponse<ApiResponse<SystemMetrics>> = await apiClient.get(\r\n      '/monitoring/metrics'\r\n    );\r\n    return response.data.data!;\r\n  },\r\n};\r\n\r\n// アラート関連の API\r\nexport const alertsApi = {\r\n  getAlerts: async (): Promise<Alert[]> => {\r\n    const response: AxiosResponse<ApiResponse<Alert[]>> = await apiClient.get(\r\n      '/monitoring/alerts'\r\n    );\r\n    return response.data.data!;\r\n  },\r\n\r\n  acknowledgeAlert: async (alertId: string): Promise<void> => {\r\n    await apiClient.post(`/monitoring/alerts/${alertId}/acknowledge`);\r\n  },\r\n};\r\n\r\n// ログ関連の API\r\nexport const logsApi = {\r\n  getLogs: async (params?: {\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n    level?: string;\r\n    source?: string;\r\n  }): Promise<LogEntry[]> => {\r\n    const response: AxiosResponse<ApiResponse<LogEntry[]>> = await apiClient.get(\r\n      '/monitoring/logs',\r\n      { params }\r\n    );\r\n    return response.data.data!;\r\n  },\r\n\r\n  addLog: async (logEntry: Omit<LogEntry, 'id' | 'timestamp'>): Promise<LogEntry> => {\r\n    const response: AxiosResponse<ApiResponse<LogEntry>> = await apiClient.post(\r\n      '/monitoring/logs',\r\n      logEntry\r\n    );\r\n    return response.data.data!;\r\n  },\r\n};\r\n\r\n// エラーハンドリング\r\nexport class ApiError extends Error {\r\n  constructor(\r\n    public status: number,\r\n    public message: string,\r\n    public errors?: string[]\r\n  ) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n  }\r\n}\r\n\r\n// エラーレスポンスの変換\r\nexport const handleApiError = (error: AxiosError): ApiError => {\r\n  if (error.response) {\r\n    return new ApiError(\r\n      error.response.status,\r\n      (error.response.data as any).message || 'APIエラーが発生しました',\r\n      (error.response.data as any).errors\r\n    );\r\n  }\r\n  return new ApiError(500, 'ネットワークエラーが発生しました');\r\n};\r\n\r\nexport default {\r\n  auth: authApi,\r\n  metrics: metricsApi,\r\n  alerts: alertsApi,\r\n  logs: logsApi,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}