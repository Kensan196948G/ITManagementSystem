{"ast":null,"code":"import { axiosInstance } from './api';\nclass MetricsService {\n  constructor() {\n    this.pollingInterval = null;\n  }\n  async getSystemMetrics() {\n    const response = await axiosInstance.get('/metrics/system');\n    if (response.data.status === 'error' || !response.data.data) {\n      throw new Error(response.data.message || 'Failed to fetch metrics');\n    }\n    return response.data.data;\n  }\n  async startMetricsPolling(callback, interval = 5000) {\n    this.pollingInterval = setInterval(async () => {\n      try {\n        const metrics = await this.getSystemMetrics();\n        callback(metrics);\n      } catch (error) {\n        console.error('Failed to fetch metrics:', error);\n      }\n    }, interval);\n    return () => {\n      if (this.pollingInterval) {\n        clearInterval(this.pollingInterval);\n        this.pollingInterval = null;\n      }\n    };\n  }\n}\nexport const metricsService = new MetricsService();","map":{"version":3,"names":["axiosInstance","MetricsService","constructor","pollingInterval","getSystemMetrics","response","get","data","status","Error","message","startMetricsPolling","callback","interval","setInterval","metrics","error","console","clearInterval","metricsService"],"sources":["E:/IT運用システム/03_実装/it-ops-system/frontend/src/services/metricsService.ts"],"sourcesContent":["import { SystemMetrics } from '../types/api';\r\nimport { axiosInstance } from './api';\r\n\r\nclass MetricsService {\r\n  private pollingInterval: NodeJS.Timeout | null = null;\r\n\r\n  async getSystemMetrics(): Promise<SystemMetrics> {\r\n    const response = await axiosInstance.get('/metrics/system');\r\n    if (response.data.status === 'error' || !response.data.data) {\r\n      throw new Error(response.data.message || 'Failed to fetch metrics');\r\n    }\r\n    return response.data.data;\r\n  }\r\n\r\n  async startMetricsPolling(callback: (metrics: SystemMetrics) => void, interval = 5000): Promise<() => void> {\r\n    this.pollingInterval = setInterval(async () => {\r\n      try {\r\n        const metrics = await this.getSystemMetrics();\r\n        callback(metrics);\r\n      } catch (error) {\r\n        console.error('Failed to fetch metrics:', error);\r\n      }\r\n    }, interval);\r\n\r\n    return () => {\r\n      if (this.pollingInterval) {\r\n        clearInterval(this.pollingInterval);\r\n        this.pollingInterval = null;\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport const metricsService = new MetricsService();"],"mappings":"AACA,SAASA,aAAa,QAAQ,OAAO;AAErC,MAAMC,cAAc,CAAC;EAAAC,YAAA;IAAA,KACXC,eAAe,GAA0B,IAAI;EAAA;EAErD,MAAMC,gBAAgBA,CAAA,EAA2B;IAC/C,MAAMC,QAAQ,GAAG,MAAML,aAAa,CAACM,GAAG,CAAC,iBAAiB,CAAC;IAC3D,IAAID,QAAQ,CAACE,IAAI,CAACC,MAAM,KAAK,OAAO,IAAI,CAACH,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;MAC3D,MAAM,IAAIE,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACG,OAAO,IAAI,yBAAyB,CAAC;IACrE;IACA,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;EAEA,MAAMI,mBAAmBA,CAACC,QAA0C,EAAEC,QAAQ,GAAG,IAAI,EAAuB;IAC1G,IAAI,CAACV,eAAe,GAAGW,WAAW,CAAC,YAAY;MAC7C,IAAI;QACF,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACX,gBAAgB,CAAC,CAAC;QAC7CQ,QAAQ,CAACG,OAAO,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC,EAAEH,QAAQ,CAAC;IAEZ,OAAO,MAAM;MACX,IAAI,IAAI,CAACV,eAAe,EAAE;QACxBe,aAAa,CAAC,IAAI,CAACf,eAAe,CAAC;QACnC,IAAI,CAACA,eAAe,GAAG,IAAI;MAC7B;IACF,CAAC;EACH;AACF;AAEA,OAAO,MAAMgB,cAAc,GAAG,IAAIlB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}